{
  "version": 3,
  "sources": ["../../eventsource-polyfill/dist/eventsource.js", "../../eventsource-polyfill/dist/browserify-eventsource.js"],
  "sourcesContent": ["/*\n   * EventSource polyfill version 0.9.6\n   * Supported by sc AmvTek srl\n   * :email: devel@amvtek.com\n */\n;(function (global) {\n\n    if (global.EventSource && !global._eventSourceImportPrefix){\n        return;\n    }\n\n    var evsImportName = (global._eventSourceImportPrefix||'')+\"EventSource\";\n\n    var EventSource = function (url, options) {\n\n        if (!url || typeof url != 'string') {\n            throw new SyntaxError('Not enough arguments');\n        }\n\n        this.URL = url;\n        this.setOptions(options);\n        var evs = this;\n        setTimeout(function(){evs.poll()}, 0);\n    };\n\n    EventSource.prototype = {\n\n        CONNECTING: 0,\n\n        OPEN: 1,\n\n        CLOSED: 2,\n\n        defaultOptions: {\n\n            loggingEnabled: false,\n\n            loggingPrefix: \"eventsource\",\n\n            interval: 500, // milliseconds\n\n            bufferSizeLimit: 256*1024, // bytes\n\n            silentTimeout: 300000, // milliseconds\n\n            getArgs:{\n                'evs_buffer_size_limit': 256*1024\n            },\n\n            xhrHeaders:{\n                'Accept': 'text/event-stream',\n                'Cache-Control': 'no-cache',\n                'X-Requested-With': 'XMLHttpRequest'\n            }\n        },\n\n        setOptions: function(options){\n\n            var defaults = this.defaultOptions;\n            var option;\n\n            // set all default options...\n            for (option in defaults){\n\n                if ( defaults.hasOwnProperty(option) ){\n                    this[option] = defaults[option];\n                }\n            }\n\n            // override with what is in options\n            for (option in options){\n\n                if (option in defaults && options.hasOwnProperty(option)){\n                    this[option] = options[option];\n                }\n            }\n\n            // if getArgs option is enabled\n            // ensure evs_buffer_size_limit corresponds to bufferSizeLimit\n            if (this.getArgs && this.bufferSizeLimit) {\n\n                this.getArgs['evs_buffer_size_limit'] = this.bufferSizeLimit;\n            }\n\n            // if console is not available, force loggingEnabled to false\n            if (typeof console === \"undefined\" || typeof console.log === \"undefined\") {\n\n                this.loggingEnabled = false;\n            }\n        },\n\n        log: function(message) {\n\n            if (this.loggingEnabled) {\n\n                console.log(\"[\" + this.loggingPrefix +\"]:\" + message)\n            }\n        },\n\n        poll: function() {\n\n            try {\n\n                if (this.readyState == this.CLOSED) {\n                    return;\n                }\n\n                this.cleanup();\n                this.readyState = this.CONNECTING;\n                this.cursor = 0;\n                this.cache = '';\n                this._xhr = new this.XHR(this);\n                this.resetNoActivityTimer();\n\n            }\n            catch (e) {\n\n                // in an attempt to silence the errors\n                this.log('There were errors inside the pool try-catch');\n                this.dispatchEvent('error', { type: 'error', data: e.message });\n            }\n        },\n\n        pollAgain: function (interval) {\n\n            // schedule poll to be called after interval milliseconds\n            var evs = this;\n            evs.readyState = evs.CONNECTING;\n            evs.dispatchEvent('error', {\n                type: 'error',\n                data: \"Reconnecting \"\n            });\n            this._pollTimer = setTimeout(function(){evs.poll()}, interval||0);\n        },\n\n\n        cleanup: function() {\n\n            this.log('evs cleaning up')\n\n            if (this._pollTimer){\n                clearInterval(this._pollTimer);\n                this._pollTimer = null;\n            }\n\n            if (this._noActivityTimer){\n                clearInterval(this._noActivityTimer);\n                this._noActivityTimer = null;\n            }\n\n            if (this._xhr){\n                this._xhr.abort();\n                this._xhr = null;\n            }\n        },\n\n        resetNoActivityTimer: function(){\n\n            if (this.silentTimeout){\n\n                if (this._noActivityTimer){\n                    clearInterval(this._noActivityTimer);\n                }\n                var evs = this;\n                this._noActivityTimer = setTimeout(\n                        function(){ evs.log('Timeout! silentTImeout:'+evs.silentTimeout); evs.pollAgain(); },\n                        this.silentTimeout\n                        );\n            }\n        },\n\n        close: function () {\n\n            this.readyState = this.CLOSED;\n            this.log('Closing connection. readyState: '+this.readyState);\n            this.cleanup();\n        },\n\n        ondata: function() {\n\n            var request = this._xhr;\n\n            if (request.isReady() && !request.hasError() ) {\n                // reset the timer, as we have activity\n                this.resetNoActivityTimer();\n\n                // move this EventSource to OPEN state...\n                if (this.readyState == this.CONNECTING) {\n                    this.readyState = this.OPEN;\n                    this.dispatchEvent('open', { type: 'open' });\n                }\n\n                var buffer = request.getBuffer();\n\n                if (buffer.length > this.bufferSizeLimit) {\n                    this.log('buffer.length > this.bufferSizeLimit');\n                    this.pollAgain();\n                }\n\n                if (this.cursor == 0 && buffer.length > 0){\n\n                    // skip byte order mark \\uFEFF character if it starts the stream\n                    if (buffer.substring(0,1) == '\\uFEFF'){\n                        this.cursor = 1;\n                    }\n                }\n\n                var lastMessageIndex = this.lastMessageIndex(buffer);\n                if (lastMessageIndex[0] >= this.cursor){\n\n                    var newcursor = lastMessageIndex[1];\n                    var toparse = buffer.substring(this.cursor, newcursor);\n                    this.parseStream(toparse);\n                    this.cursor = newcursor;\n                }\n\n                // if request is finished, reopen the connection\n                if (request.isDone()) {\n                    this.log('request.isDone(). reopening the connection');\n                    this.pollAgain(this.interval);\n                }\n            }\n            else if (this.readyState !== this.CLOSED) {\n\n                this.log('this.readyState !== this.CLOSED');\n                this.pollAgain(this.interval);\n\n                //MV: Unsure why an error was previously dispatched\n            }\n        },\n\n        parseStream: function(chunk) {\n\n            // normalize line separators (\\r\\n,\\r,\\n) to \\n\n            // remove white spaces that may precede \\n\n            chunk = this.cache + this.normalizeToLF(chunk);\n\n            var events = chunk.split('\\n\\n');\n\n            var i, j, eventType, datas, line, retry;\n\n            for (i=0; i < (events.length - 1); i++) {\n\n                eventType = 'message';\n                datas = [];\n                parts = events[i].split('\\n');\n\n                for (j=0; j < parts.length; j++) {\n\n                    line = this.trimWhiteSpace(parts[j]);\n\n                    if (line.indexOf('event') == 0) {\n\n                        eventType = line.replace(/event:?\\s*/, '');\n                    }\n                    else if (line.indexOf('retry') == 0) {\n\n                        retry = parseInt(line.replace(/retry:?\\s*/, ''));\n                        if(!isNaN(retry)) {\n                            this.interval = retry;\n                        }\n                    }\n                    else if (line.indexOf('data') == 0) {\n\n                        datas.push(line.replace(/data:?\\s*/, ''));\n                    }\n                    else if (line.indexOf('id:') == 0) {\n\n                        this.lastEventId = line.replace(/id:?\\s*/, '');\n                    }\n                    else if (line.indexOf('id') == 0) { // this resets the id\n\n                        this.lastEventId = null;\n                    }\n                }\n\n                if (datas.length) {\n                    // dispatch a new event\n                    var event = new MessageEvent(eventType, datas.join('\\n'), window.location.origin, this.lastEventId);\n                    this.dispatchEvent(eventType, event);\n                }\n            }\n\n            this.cache = events[events.length - 1];\n        },\n\n        dispatchEvent: function (type, event) {\n            var handlers = this['_' + type + 'Handlers'];\n\n            if (handlers) {\n\n                for (var i = 0; i < handlers.length; i++) {\n                    handlers[i].call(this, event);\n                }\n            }\n\n            if (this['on' + type]) {\n                this['on' + type].call(this, event);\n            }\n\n        },\n\n        addEventListener: function (type, handler) {\n            if (!this['_' + type + 'Handlers']) {\n                this['_' + type + 'Handlers'] = [];\n            }\n\n            this['_' + type + 'Handlers'].push(handler);\n        },\n\n        removeEventListener: function (type, handler) {\n            var handlers = this['_' + type + 'Handlers'];\n            if (!handlers) {\n                return;\n            }\n            for (var i = handlers.length - 1; i >= 0; --i) {\n                if (handlers[i] === handler) {\n                    handlers.splice(i, 1);\n                    break;\n                }\n            }\n        },\n\n        _pollTimer: null,\n\n        _noactivityTimer: null,\n\n        _xhr: null,\n\n        lastEventId: null,\n\n        cache: '',\n\n        cursor: 0,\n\n        onerror: null,\n\n        onmessage: null,\n\n        onopen: null,\n\n        readyState: 0,\n\n        // ===================================================================\n        // helpers functions\n        // those are attached to prototype to ease reuse and testing...\n\n        urlWithParams: function (baseURL, params) {\n\n            var encodedArgs = [];\n\n            if (params){\n\n                var key, urlarg;\n                var urlize = encodeURIComponent;\n\n                for (key in params){\n                    if (params.hasOwnProperty(key)) {\n                        urlarg = urlize(key)+'='+urlize(params[key]);\n                        encodedArgs.push(urlarg);\n                    }\n                }\n            }\n\n            if (encodedArgs.length > 0){\n\n                if (baseURL.indexOf('?') == -1)\n                    return baseURL + '?' + encodedArgs.join('&');\n                return baseURL + '&' + encodedArgs.join('&');\n            }\n            return baseURL;\n        },\n\n        lastMessageIndex: function(text) {\n\n            var ln2 =text.lastIndexOf('\\n\\n');\n            var lr2 = text.lastIndexOf('\\r\\r');\n            var lrln2 = text.lastIndexOf('\\r\\n\\r\\n');\n\n            if (lrln2 > Math.max(ln2, lr2)) {\n                return [lrln2, lrln2+4];\n            }\n            return [Math.max(ln2, lr2), Math.max(ln2, lr2) + 2]\n        },\n\n        trimWhiteSpace: function(str) {\n            // to remove whitespaces left and right of string\n\n            var reTrim = /^(\\s|\\u00A0)+|(\\s|\\u00A0)+$/g;\n            return str.replace(reTrim, '');\n        },\n\n        normalizeToLF: function(str) {\n\n            // replace \\r and \\r\\n with \\n\n            return str.replace(/\\r\\n|\\r/g, '\\n');\n        }\n\n    };\n\n    if (!isOldIE()){\n\n        EventSource.isPolyfill = \"XHR\";\n\n        // EventSource will send request using XMLHttpRequest\n        EventSource.prototype.XHR = function(evs) {\n\n            request = new XMLHttpRequest();\n            this._request = request;\n            evs._xhr = this;\n\n            // set handlers\n            request.onreadystatechange = function(){\n                if (request.readyState > 1 && evs.readyState != evs.CLOSED) {\n                    if (request.status == 200 || (request.status>=300 && request.status<400)){\n                        evs.ondata();\n                    }\n                    else {\n                        request._failed = true;\n                        evs.readyState = evs.CLOSED;\n                        evs.dispatchEvent('error', {\n                            type: 'error',\n                            data: \"The server responded with \"+request.status\n                        });\n                        evs.close();\n                    }\n                }\n            };\n\n            request.onprogress = function () {\n            };\n\n            request.open('GET', evs.urlWithParams(evs.URL, evs.getArgs), true);\n\n            var headers = evs.xhrHeaders; // maybe null\n            for (var header in headers) {\n                if (headers.hasOwnProperty(header)){\n                    request.setRequestHeader(header, headers[header]);\n                }\n            }\n            if (evs.lastEventId) {\n                request.setRequestHeader('Last-Event-Id', evs.lastEventId);\n            }\n\n            request.send();\n        };\n\n        EventSource.prototype.XHR.prototype = {\n\n            useXDomainRequest: false,\n\n            _request: null,\n\n            _failed: false, // true if we have had errors...\n\n            isReady: function() {\n\n\n                return this._request.readyState >= 2;\n            },\n\n            isDone: function() {\n\n                return (this._request.readyState == 4);\n            },\n\n            hasError: function() {\n\n                return (this._failed || (this._request.status >= 400));\n            },\n\n            getBuffer: function() {\n\n                var rv = '';\n                try {\n                    rv = this._request.responseText || '';\n                }\n                catch (e){}\n                return rv;\n            },\n\n            abort: function() {\n\n                if ( this._request ) {\n                    this._request.abort();\n                }\n            }\n        };\n    }\n    else {\n\n\tEventSource.isPolyfill = \"IE_8-9\";\n\n        // patch EventSource defaultOptions\n        var defaults = EventSource.prototype.defaultOptions;\n        defaults.xhrHeaders = null; // no headers will be sent\n        defaults.getArgs['evs_preamble'] = 2048 + 8;\n\n        // EventSource will send request using Internet Explorer XDomainRequest\n        EventSource.prototype.XHR = function(evs) {\n\n            request = new XDomainRequest();\n            this._request = request;\n\n            // set handlers\n            request.onprogress = function(){\n                request._ready = true;\n                evs.ondata();\n            };\n\n            request.onload = function(){\n                this._loaded = true;\n                evs.ondata();\n            };\n\n            request.onerror = function(){\n                this._failed = true;\n                evs.readyState = evs.CLOSED;\n                evs.dispatchEvent('error', {\n                    type: 'error',\n                    data: \"XDomainRequest error\"\n                });\n            };\n\n            request.ontimeout = function(){\n                this._failed = true;\n                evs.readyState = evs.CLOSED;\n                evs.dispatchEvent('error', {\n                    type: 'error',\n                    data: \"XDomainRequest timed out\"\n                });\n            };\n\n            // XDomainRequest does not allow setting custom headers\n            // If EventSource has enabled the use of GET arguments\n            // we add parameters to URL so that server can adapt the stream...\n            var reqGetArgs = {};\n            if (evs.getArgs) {\n\n                // copy evs.getArgs in reqGetArgs\n                var defaultArgs = evs.getArgs;\n                    for (var key in defaultArgs) {\n                        if (defaultArgs.hasOwnProperty(key)){\n                            reqGetArgs[key] = defaultArgs[key];\n                        }\n                    }\n                if (evs.lastEventId){\n                    reqGetArgs['evs_last_event_id'] = evs.lastEventId;\n                }\n            }\n            // send the request\n\n            request.open('GET', evs.urlWithParams(evs.URL,reqGetArgs));\n            request.send();\n        };\n\n        EventSource.prototype.XHR.prototype = {\n\n            useXDomainRequest: true,\n\n            _request: null,\n\n            _ready: false, // true when progress events are dispatched\n\n            _loaded: false, // true when request has been loaded\n\n            _failed: false, // true if when request is in error\n\n            isReady: function() {\n\n                return this._request._ready;\n            },\n\n            isDone: function() {\n\n                return this._request._loaded;\n            },\n\n            hasError: function() {\n\n                return this._request._failed;\n            },\n\n            getBuffer: function() {\n\n                var rv = '';\n                try {\n                    rv = this._request.responseText || '';\n                }\n                catch (e){}\n                return rv;\n            },\n\n            abort: function() {\n\n                if ( this._request){\n                    this._request.abort();\n                }\n            }\n        };\n    }\n\n    function MessageEvent(type, data, origin, lastEventId) {\n\n        this.bubbles = false;\n        this.cancelBubble = false;\n        this.cancelable = false;\n        this.data = data || null;\n        this.origin = origin || '';\n        this.lastEventId = lastEventId || '';\n        this.type = type || 'message';\n    }\n\n    function isOldIE () {\n\n        //return true if we are in IE8 or IE9\n        return (window.XDomainRequest && (window.XMLHttpRequest && new XMLHttpRequest().responseType === undefined)) ? true : false;\n    }\n\n    global[evsImportName] = EventSource;\n})(this);\n", "/*\n   * CommonJS module that exports EventSource polyfill version 0.9.6\n   * This module is intended for browser side use\n   * =====================================================================\n   * THIS IS A POLYFILL MODULE, SO IT HAS SIDE EFFECTS\n   * IT AUTOMATICALLY CHECKS IF window OBJECT DEFINES EventSource\n   * AND ADD THE EXPORTED ONE IN CASE IT IS UNDEFINED\n   * =====================================================================\n   * Supported by sc AmvTek srl\n   * :email: devel@amvtek.com\n */\n\n\nvar PolyfillEventSource = require('./eventsource.js').EventSource;\nmodule.exports = PolyfillEventSource;\n\n// Add EventSource to window if it is missing...\nif (window && !window.EventSource){\n    window.EventSource = PolyfillEventSource;\n    if (console){\n\tconsole.log(\"polyfill-eventsource added missing EventSource to window\");\n    }\n}\n"],
  "mappings": "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",
  "names": ["defaults", "request"]
}
